---
import BaseLayout from './BaseLayout.astro';
import type {CollectionEntry} from 'astro:content';
import {getCollection, getEntry} from 'astro:content';

interface Props {
    entry: CollectionEntry<'tutorials'>;
}

const {entry} = Astro.props;
const {
    title,
    description,
    date,
    author: authorSlug,
    type,
    youtube_id,
    difficulty,
    prerequisites,
    estimated_time
} = entry.data;

const author = await getEntry('team', authorSlug);
const { Content } = await entry.render();

const formattedDate = new Date(date).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
});
---

<BaseLayout title={`${title} - Shoelace Studios Tutorials`}>
    <article class="tutorial">
        <header class="tutorial-header">
            <div class="tutorial-meta">
                <div class="difficulty" data-level={difficulty.toLowerCase()}>
                    {difficulty}
                </div>
                <div class="estimated-time">
                    {estimated_time} minutes
                </div>
            </div>
            <h1>{title}</h1>
            <p class="description">{description}</p>
            <div class="author-info">
                {author && (
                        <>
                            <img
                                    src={author.data.avatar}
                                    alt={author.data.name}
                                    class="author-avatar"
                            />
                            <div>
                                <span class="author-name">{author.data.name}</span>
                                <time datetime={date.toISOString()}>{formattedDate}</time>
                            </div>
                        </>
                )}
            </div>
        </header>

        {prerequisites && prerequisites.length > 0 && (
                <section class="prerequisites">
                    <h2>Prerequisites</h2>
                    <ul>
                        {prerequisites.map(prereq => (
                                <li>{prereq}</li>
                        ))}
                    </ul>
                </section>
        )}

        {youtube_id && (
                <div class="video-container">
                    <iframe
                            src={`https://www.youtube.com/embed/${youtube_id}`}
                            title={title}
                            frameborder="0"
                            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                            allowfullscreen
                    ></iframe>
                </div>
        )}

        <div class="content">
            <Content />
        </div>
    </article>
</BaseLayout>

<style>
    .tutorial {
        max-width: 65rem;
        margin: 0 auto;
        padding: 2rem 1rem;
    }

    .tutorial-header {
        max-width: 48rem;
        margin: 0 auto 2rem;
    }

    .tutorial-meta {
        display: flex;
        gap: 1rem;
        margin-bottom: 1rem;
    }

    .difficulty {
        padding: 0.25rem 0.75rem;
        border-radius: 9999px;
        font-size: 0.875rem;
    }

    .difficulty[data-level="beginner"] {
        background-color: rgba(34, 197, 94, 0.2);
        color: rgb(34, 197, 94);
    }

    .difficulty[data-level="intermediate"] {
        background-color: rgba(245, 158, 11, 0.2);
        color: rgb(245, 158, 11);
    }

    .difficulty[data-level="advanced"] {
        background-color: rgba(239, 68, 68, 0.2);
        color: rgb(239, 68, 68);
    }

    .estimated-time {
        color: rgb(209, 213, 219);
        font-size: 0.875rem;
        display: flex;
        align-items: center;
    }

    h1 {
        font-size: 2.5rem;
        color: white;
        margin-bottom: 1rem;
    }

    .description {
        color: rgb(209, 213, 219);
        font-size: 1.25rem;
        margin-bottom: 1.5rem;
    }

    .author-info {
        display: flex;
        align-items: center;
        gap: 1rem;
        color: rgb(209, 213, 219);
    }

    .author-avatar {
        width: 2.5rem;
        height: 2.5rem;
        border-radius: 9999px;
    }

    .author-name {
        display: block;
        color: white;
    }

    .prerequisites {
        max-width: 48rem;
        margin: 2rem auto;
        padding: 1.5rem;
        background-color: rgba(22, 34, 42, 0.95);
        border-radius: 0.5rem;
    }

    .prerequisites h2 {
        color: rgb(245, 100, 32);
        font-size: 1.25rem;
        margin-bottom: 1rem;
    }

    .prerequisites ul {
        list-style-type: disc;
        padding-left: 1.5rem;
        color: rgb(209, 213, 219);
    }

    .video-container {
        position: relative;
        padding-bottom: 56.25%;
        margin: 2rem auto;
        max-width: 48rem;
    }

    .video-container iframe {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        border-radius: 0.5rem;
    }

    .content {
        max-width: 48rem;
        margin: 0 auto;
        color: rgb(209, 213, 219);
    }

    .content :global(h2) {
        color: rgb(245, 100, 32);
        font-size: 1.875rem;
        margin: 2rem 0 1rem;
    }

    .content :global(h3) {
        color: white;
        font-size: 1.5rem;
        margin: 1.5rem 0 1rem;
    }

    .content :global(p) {
        margin-bottom: 1.5rem;
        line-height: 1.8;
    }

    .content :global(code) {
        background-color: rgba(255, 255, 255, 0.1);
        padding: 0.2rem 0.4rem;
        border-radius: 0.25rem;
    }

    .content :global(pre) {
        background-color: rgba(22, 34, 42, 0.95);
        padding: 1rem;
        border-radius: 0.5rem;
        overflow-x: auto;
        margin: 1.5rem 0;
    }

    .content :global(a) {
        color: rgb(245, 100, 32); /* Your site's orange color */
        text-decoration: none;
        transition: color 0.2s ease;
    }

    .content :global(a:hover) {
        color: rgb(255, 130, 62); /* Lighter orange for hover */
        text-decoration: underline;
    }

    .content :global(a:visited) {
        color: rgb(225, 80, 12); /* Darker orange for visited links */
    }

    .content :global(a:active) {
        color: rgb(185, 60, 0); /* Even darker orange when clicked */
    }
    @media (max-width: 768px) {
        h1 {
            font-size: 2rem;
        }

        .tutorial-meta {
            flex-direction: column;
        }
    }
</style>